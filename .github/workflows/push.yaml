name: Push to Main

on:
  push:
    branches: [main, master]

jobs:
  lint-test-build:
    name: Lint, Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: |
          uv pip install --system -e .[dev]
      
      - name: Check formatting
        run: |
          black . -l 79 --check
          linecheck . --check
      
      - name: Run all tests with coverage
        run: |
          uv run pytest policyengine_au/tests -v --cov=policyengine_au --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          pip install twine
          twine check dist/*

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: lint-test-build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Install package with docs dependencies
        run: |
          uv pip install --system -e .[dev]
      
      - name: Build documentation
        run: |
          myst build docs
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build

  # Commented out until ready to publish to PyPI
  # publish:
  #   name: Publish to PyPI
  #   runs-on: ubuntu-latest
  #   needs: lint-test-build
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.13"
  #     
  #     - name: Install build tools
  #       run: |
  #         pip install build twine
  #     
  #     - name: Build package
  #       run: |
  #         python -m build
  #     
  #     - name: Publish to PyPI
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #       run: |
  #         twine upload dist/*